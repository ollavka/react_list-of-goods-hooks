{"version":3,"sources":["enums/SortField.ts","components/GoodList.tsx","components/Buttons.tsx","App.tsx","index.tsx"],"names":["SortField","GoodList","goods","map","good","Buttons","props","sortField","sortBy","isReversed","changeOrder","className","type","onClick","Alphabet","classNames","Length","prevOrder","Default","goodsFromServer","App","useState","setSortField","setIsReversed","preparedGoods","options","sort","good1","good2","localeCompare","length","reverse","getPreparedGood","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,+CAAAA,K,oBAAAA,E,gBAAAA,E,YAAAA,M,gBCMCC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjC,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,S,gBCEjBC,EAAqB,SAACC,GACjC,IACEC,EAIED,EAJFC,UACAC,EAGEF,EAHFE,OACAC,EAEEH,EAFFG,WACAC,EACEJ,EADFI,YAQF,OACE,sBAAKC,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAML,EAAOR,EAAUc,WAChCH,UAAWI,IAAW,SAAU,UAAW,CACzC,WAAYR,IAAcP,EAAUc,WAJxC,iCAUA,wBACEF,KAAK,SACLC,QAAS,kBAAML,EAAOR,EAAUgB,SAChCL,UAAWI,IAAW,SAAU,aAAc,CAC5C,WAAYR,IAAcP,EAAUgB,SAJxC,4BAUA,wBACEJ,KAAK,SACLC,QAAS,kBAAMH,GAAY,SAAAO,GAAS,OAAKA,MACzCN,UAAWI,IAAW,SAAU,aAAc,CAC5C,YAAaN,IAJjB,sBAUEF,GAAaE,IACb,wBACEG,KAAK,SACLD,UAAU,4BACVE,QAzCiB,WACvBL,EAAOR,EAAUkB,SACjBR,GAAY,IAoCR,uBClDKS,G,YAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,WAmCK,IAAMC,EAAU,WACrB,MAAkCC,mBAAoBrB,EAAUkB,SAAhE,mBAAOX,EAAP,KAAkBe,EAAlB,KACA,EAAoCD,oBAAkB,GAAtD,mBAAOZ,EAAP,KAAmBc,EAAnB,KAEMC,EA/BR,SAAyBtB,EAAiBuB,GACxC,IAAQlB,EAA0BkB,EAA1BlB,UAAWE,EAAegB,EAAfhB,WAEbe,EAAa,YAAOtB,GAqB1B,OAnBIK,GACFiB,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQrB,GACN,KAAKP,EAAUc,SACb,OAAOa,EAAME,cAAcD,GAE7B,KAAK5B,EAAUgB,OACb,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXrB,GACFe,EAAcO,UAGTP,EAOeQ,CAAgBb,EAAiB,CACrDZ,YACAE,eAGF,OACE,sBAAKE,UAAU,kBAAf,UACE,cAAC,EAAD,CACEJ,UAAWA,EACXC,OAAQc,EACRb,WAAYA,EACZC,YAAaa,IAGf,cAAC,EAAD,CAAUrB,MAAOsB,QCnEvBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2d0c2fc4.chunk.js","sourcesContent":["export enum SortField {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  Default = '',\n}\n","import { FC } from 'react';\n\ntype Props = {\n  goods: string[];\n};\n\nexport const GoodList: FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li data-cy=\"Good\" key={good}>{good}</li>\n    ))}\n  </ul>\n);\n","import { FC, Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { SortField } from '../enums/SortField';\n\ntype Props = {\n  sortField: SortField;\n  sortBy: Dispatch<SetStateAction<SortField>>;\n  isReversed: boolean;\n  changeOrder: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const Buttons: FC<Props> = (props) => {\n  const {\n    sortField,\n    sortBy,\n    isReversed,\n    changeOrder,\n  } = props;\n\n  const handleResetGoods = () => {\n    sortBy(SortField.Default);\n    changeOrder(false);\n  };\n\n  return (\n    <div className=\"buttons\">\n      <button\n        type=\"button\"\n        onClick={() => sortBy(SortField.Alphabet)}\n        className={classNames('button', 'is-info', {\n          'is-light': sortField !== SortField.Alphabet,\n        })}\n      >\n        Sort alphabetically\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={() => sortBy(SortField.Length)}\n        className={classNames('button', 'is-success', {\n          'is-light': sortField !== SortField.Length,\n        })}\n      >\n        Sort by length\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={() => changeOrder(prevOrder => !prevOrder)}\n        className={classNames('button', 'is-warning', {\n          'is-light': !isReversed,\n        })}\n      >\n        Reverse\n      </button>\n\n      {(sortField || isReversed) && (\n        <button\n          type=\"button\"\n          className=\"button is-danger is-light\"\n          onClick={handleResetGoods}\n        >\n          Reset\n        </button>\n      )}\n    </div>\n  );\n};\n","import { FC, useState } from 'react';\nimport { SortField } from './enums/SortField';\nimport { GoodList } from './components/GoodList';\nimport { Buttons } from './components/Buttons';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype SortOptions = {\n  sortField: SortField;\n  isReversed: boolean;\n};\n\nfunction getPreparedGood(goods: string[], options: SortOptions) {\n  const { sortField, isReversed } = options;\n\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alphabet:\n          return good1.localeCompare(good2);\n\n        case SortField.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: FC = () => {\n  const [sortField, setSortField] = useState<SortField>(SortField.Default);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const preparedGoods = getPreparedGood(goodsFromServer, {\n    sortField,\n    isReversed,\n  });\n\n  return (\n    <div className=\"section content\">\n      <Buttons\n        sortField={sortField}\n        sortBy={setSortField}\n        isReversed={isReversed}\n        changeOrder={setIsReversed}\n      />\n\n      <GoodList goods={preparedGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}